{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","fa","total","status","App","state","heroes","clickedIds","score","goal","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score_Score","components_Wrapper_Wrapper","map","marvelheroes","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i9DAWeA,SAPF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAChDC,QAAS,kBAAMV,EAAMW,iBAAiBX,EAAMS,KAAKL,UAAU,oBCFpDQ,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,2BCQ1CC,EAND,SAAAd,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,cAAiCH,EAAAC,EAAAC,cAACY,EAAA,EAAD,MAAjC,IAAmDf,EAAMgB,OACzDf,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUJ,EAAMiB,iBCsEnBC,oNArEbC,MAAQ,CACNC,SACAC,WAAY,GACZC,MAAO,EACPC,KAAM,EACNN,OAAQ,MAIVN,iBAAmB,SAAAF,GACjB,IAAIY,EAAaG,EAAKL,MAAME,WAE5B,GAAIA,EAAWI,SAAShB,GACtBe,EAAKE,SAAS,CAAEL,WAAY,GAAIC,MAAO,EAAGL,OAAQ,wCADpD,CAME,GAFAI,EAAWM,KAAKlB,GAEU,IAAtBY,EAAWO,OAGb,OAFAJ,EAAKE,SAAS,CAAEJ,MAAO,EAAGL,OAAQ,4BAA6BI,WAAY,UAC3EQ,QAAQC,IAAI,WAIdN,EAAKE,SAAS,CAAEN,SAAQC,aAAYC,MAAOD,EAAWO,OAAQX,OAAQ,MAEtE,IAAK,IAAIc,EAAIX,EAAOQ,OAAS,EAAGG,EAAI,EAAGA,IAAK,CAC1C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADEK,EAEjB,CAAChB,EAAOY,GAAIZ,EAAOW,IAA3CX,EAAOW,GAFkCK,EAAA,GAE9BhB,EAAOY,GAFuBI,EAAA,8EAQvC,IAAAC,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mCAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,iCACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,yCAIFH,EAAAC,EAAAC,cAACoC,EAAD,CAAOvB,MAAOsB,KAAKnB,MAAMG,MACvBC,KAAM,EACNN,OAAQqB,KAAKnB,MAAMF,SAErBhB,EAAAC,EAAAC,cAACqC,EAAD,KACGF,KAAKnB,MAAMC,OAAOqB,IAAI,SAAAC,GAAY,OACjCzC,EAAAC,EAAAC,cAACwC,EAAD,CACEhC,iBAAkB0B,EAAK1B,iBACvBF,GAAIiC,EAAajC,GACjBmC,IAAKF,EAAajC,GAClBD,MAAOkC,EAAalC,WAI1BP,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,2DA9DM0C,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.409d8ce7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\n// Card component is  rendering the images to the screen\nconst Card = props => (\n  <div className=\"card img-container hover\">\n      <img alt={props.name} src={props.image} id={props.id}\n        onClick={() => props.shuffleScoreCard(props.id)} className='shuffleScore'/>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Score.css\";\nimport {FaCaretRight} from 'react-icons/fa';\n\n// Score component\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Your Score <FaCaretRight /> {props.total}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\nexport default Score;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport heroes from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.heroes to the cards json array\n  state = {\n    heroes,\n    clickedIds: [],\n    score: 0,\n    goal: 8,\n    status: \"\"\n  };\n\n  //shuffle the cards when clicked\n  shuffleScoreCard = id => {\n    let clickedIds = this.state.clickedIds;\n\n    if (clickedIds.includes(id)) {\n      this.setState({ clickedIds: [], score: 0, status: \"Game Over! You lost! Try again!\" });\n      return;\n    } else {\n      clickedIds.push(id)\n\n      if (clickedIds.length === 8) {\n        this.setState({ score: 8, status: \"Congratulations! You won!\", clickedIds: [] });\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ heroes, clickedIds, score: clickedIds.length, status: \" \" });\n\n      for (let i = heroes.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [heroes[i], heroes[j]] = [heroes[j], heroes[i]];\n      }\n    }\n  }\n\n  // Render a Card component for each card object\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header text-center text-red\">\n          <h1 className=\"App-title\">Clicking Game: Marvel Edition</h1>\n          <p className=\"App-intro\">\n            Avoid clicking the same image twice!\n          </p>\n        </header>\n        <Score total={this.state.score}\n          goal={8}\n          status={this.state.status}\n        />\n        <Wrapper>\n          {this.state.heroes.map(marvelheroes => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={marvelheroes.id}\n              key={marvelheroes.id}\n              image={marvelheroes.image}\n            />\n          ))}\n        </Wrapper>\n        <footer>\n          <div className=\"copyright py-4 text-center\">\n            <div className=\"container\">\n            <small>Copyright &copy; Mike Diallo 2019</small>\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}